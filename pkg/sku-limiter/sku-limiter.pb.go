// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sku-limiter.proto

package skulimiter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CREATE Limit SKU
type CLRequest struct {
	Skus                 map[string]*CLRequest_Actions `protobuf:"bytes,1,rep,name=skus,proto3" json:"skus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CLRequest) Reset()         { *m = CLRequest{} }
func (m *CLRequest) String() string { return proto.CompactTextString(m) }
func (*CLRequest) ProtoMessage()    {}
func (*CLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{0}
}
func (m *CLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLRequest.Merge(m, src)
}
func (m *CLRequest) XXX_Size() int {
	return m.Size()
}
func (m *CLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CLRequest proto.InternalMessageInfo

func (m *CLRequest) GetSkus() map[string]*CLRequest_Actions {
	if m != nil {
		return m.Skus
	}
	return nil
}

type CLRequest_Action struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Sec                  int64    `protobuf:"varint,2,opt,name=sec,proto3" json:"sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLRequest_Action) Reset()         { *m = CLRequest_Action{} }
func (m *CLRequest_Action) String() string { return proto.CompactTextString(m) }
func (*CLRequest_Action) ProtoMessage()    {}
func (*CLRequest_Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{0, 0}
}
func (m *CLRequest_Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CLRequest_Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CLRequest_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CLRequest_Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLRequest_Action.Merge(m, src)
}
func (m *CLRequest_Action) XXX_Size() int {
	return m.Size()
}
func (m *CLRequest_Action) XXX_DiscardUnknown() {
	xxx_messageInfo_CLRequest_Action.DiscardUnknown(m)
}

var xxx_messageInfo_CLRequest_Action proto.InternalMessageInfo

func (m *CLRequest_Action) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CLRequest_Action) GetSec() int64 {
	if m != nil {
		return m.Sec
	}
	return 0
}

type CLRequest_Actions struct {
	Actions              map[string]*CLRequest_Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CLRequest_Actions) Reset()         { *m = CLRequest_Actions{} }
func (m *CLRequest_Actions) String() string { return proto.CompactTextString(m) }
func (*CLRequest_Actions) ProtoMessage()    {}
func (*CLRequest_Actions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{0, 1}
}
func (m *CLRequest_Actions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CLRequest_Actions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CLRequest_Actions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CLRequest_Actions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLRequest_Actions.Merge(m, src)
}
func (m *CLRequest_Actions) XXX_Size() int {
	return m.Size()
}
func (m *CLRequest_Actions) XXX_DiscardUnknown() {
	xxx_messageInfo_CLRequest_Actions.DiscardUnknown(m)
}

var xxx_messageInfo_CLRequest_Actions proto.InternalMessageInfo

func (m *CLRequest_Actions) GetActions() map[string]*CLRequest_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type CLResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLResponse) Reset()         { *m = CLResponse{} }
func (m *CLResponse) String() string { return proto.CompactTextString(m) }
func (*CLResponse) ProtoMessage()    {}
func (*CLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{1}
}
func (m *CLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLResponse.Merge(m, src)
}
func (m *CLResponse) XXX_Size() int {
	return m.Size()
}
func (m *CLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CLResponse proto.InternalMessageInfo

func (m *CLResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// GET Limit SKU
type GLRequest struct {
	Skus                 []string `protobuf:"bytes,1,rep,name=skus,proto3" json:"skus,omitempty"`
	Actions              []string `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GLRequest) Reset()         { *m = GLRequest{} }
func (m *GLRequest) String() string { return proto.CompactTextString(m) }
func (*GLRequest) ProtoMessage()    {}
func (*GLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{2}
}
func (m *GLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLRequest.Merge(m, src)
}
func (m *GLRequest) XXX_Size() int {
	return m.Size()
}
func (m *GLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GLRequest proto.InternalMessageInfo

func (m *GLRequest) GetSkus() []string {
	if m != nil {
		return m.Skus
	}
	return nil
}

func (m *GLRequest) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

type GLResponse struct {
	Skus                 map[string]*GLResponse_Actions `protobuf:"bytes,1,rep,name=skus,proto3" json:"skus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GLResponse) Reset()         { *m = GLResponse{} }
func (m *GLResponse) String() string { return proto.CompactTextString(m) }
func (*GLResponse) ProtoMessage()    {}
func (*GLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{3}
}
func (m *GLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLResponse.Merge(m, src)
}
func (m *GLResponse) XXX_Size() int {
	return m.Size()
}
func (m *GLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GLResponse proto.InternalMessageInfo

func (m *GLResponse) GetSkus() map[string]*GLResponse_Actions {
	if m != nil {
		return m.Skus
	}
	return nil
}

type GLResponse_Action struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Sec                  int64    `protobuf:"varint,2,opt,name=sec,proto3" json:"sec,omitempty"`
	Datestart            int64    `protobuf:"varint,3,opt,name=datestart,proto3" json:"datestart,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GLResponse_Action) Reset()         { *m = GLResponse_Action{} }
func (m *GLResponse_Action) String() string { return proto.CompactTextString(m) }
func (*GLResponse_Action) ProtoMessage()    {}
func (*GLResponse_Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{3, 0}
}
func (m *GLResponse_Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLResponse_Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLResponse_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLResponse_Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLResponse_Action.Merge(m, src)
}
func (m *GLResponse_Action) XXX_Size() int {
	return m.Size()
}
func (m *GLResponse_Action) XXX_DiscardUnknown() {
	xxx_messageInfo_GLResponse_Action.DiscardUnknown(m)
}

var xxx_messageInfo_GLResponse_Action proto.InternalMessageInfo

func (m *GLResponse_Action) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GLResponse_Action) GetSec() int64 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *GLResponse_Action) GetDatestart() int64 {
	if m != nil {
		return m.Datestart
	}
	return 0
}

type GLResponse_Actions struct {
	Actions              map[string]*GLResponse_Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GLResponse_Actions) Reset()         { *m = GLResponse_Actions{} }
func (m *GLResponse_Actions) String() string { return proto.CompactTextString(m) }
func (*GLResponse_Actions) ProtoMessage()    {}
func (*GLResponse_Actions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{3, 1}
}
func (m *GLResponse_Actions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLResponse_Actions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLResponse_Actions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLResponse_Actions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLResponse_Actions.Merge(m, src)
}
func (m *GLResponse_Actions) XXX_Size() int {
	return m.Size()
}
func (m *GLResponse_Actions) XXX_DiscardUnknown() {
	xxx_messageInfo_GLResponse_Actions.DiscardUnknown(m)
}

var xxx_messageInfo_GLResponse_Actions proto.InternalMessageInfo

func (m *GLResponse_Actions) GetActions() map[string]*GLResponse_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

// DEL Limit SKU
type DLRequest struct {
	Skus                 []string `protobuf:"bytes,1,rep,name=skus,proto3" json:"skus,omitempty"`
	Actions              []string `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DLRequest) Reset()         { *m = DLRequest{} }
func (m *DLRequest) String() string { return proto.CompactTextString(m) }
func (*DLRequest) ProtoMessage()    {}
func (*DLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{4}
}
func (m *DLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLRequest.Merge(m, src)
}
func (m *DLRequest) XXX_Size() int {
	return m.Size()
}
func (m *DLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DLRequest proto.InternalMessageInfo

func (m *DLRequest) GetSkus() []string {
	if m != nil {
		return m.Skus
	}
	return nil
}

func (m *DLRequest) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

type DLResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DLResponse) Reset()         { *m = DLResponse{} }
func (m *DLResponse) String() string { return proto.CompactTextString(m) }
func (*DLResponse) ProtoMessage()    {}
func (*DLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{5}
}
func (m *DLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLResponse.Merge(m, src)
}
func (m *DLResponse) XXX_Size() int {
	return m.Size()
}
func (m *DLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DLResponse proto.InternalMessageInfo

func (m *DLResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// ADD Order USER
type AORequest struct {
	UserId               int32            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderId              int32            `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderTs              int64            `protobuf:"varint,3,opt,name=order_ts,json=orderTs,proto3" json:"order_ts,omitempty"`
	Content              []*AORequest_SKU `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AORequest) Reset()         { *m = AORequest{} }
func (m *AORequest) String() string { return proto.CompactTextString(m) }
func (*AORequest) ProtoMessage()    {}
func (*AORequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{6}
}
func (m *AORequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AORequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AORequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AORequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AORequest.Merge(m, src)
}
func (m *AORequest) XXX_Size() int {
	return m.Size()
}
func (m *AORequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AORequest.DiscardUnknown(m)
}

var xxx_messageInfo_AORequest proto.InternalMessageInfo

func (m *AORequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AORequest) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *AORequest) GetOrderTs() int64 {
	if m != nil {
		return m.OrderTs
	}
	return 0
}

func (m *AORequest) GetContent() []*AORequest_SKU {
	if m != nil {
		return m.Content
	}
	return nil
}

type AORequest_SKU struct {
	Sku                  string   `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	MarketingActionId    string   `protobuf:"bytes,2,opt,name=marketing_action_id,json=marketingActionId,proto3" json:"marketing_action_id,omitempty"`
	Qty                  int32    `protobuf:"varint,3,opt,name=qty,proto3" json:"qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AORequest_SKU) Reset()         { *m = AORequest_SKU{} }
func (m *AORequest_SKU) String() string { return proto.CompactTextString(m) }
func (*AORequest_SKU) ProtoMessage()    {}
func (*AORequest_SKU) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{6, 0}
}
func (m *AORequest_SKU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AORequest_SKU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AORequest_SKU.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AORequest_SKU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AORequest_SKU.Merge(m, src)
}
func (m *AORequest_SKU) XXX_Size() int {
	return m.Size()
}
func (m *AORequest_SKU) XXX_DiscardUnknown() {
	xxx_messageInfo_AORequest_SKU.DiscardUnknown(m)
}

var xxx_messageInfo_AORequest_SKU proto.InternalMessageInfo

func (m *AORequest_SKU) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *AORequest_SKU) GetMarketingActionId() string {
	if m != nil {
		return m.MarketingActionId
	}
	return ""
}

func (m *AORequest_SKU) GetQty() int32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

type AOResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AOResponse) Reset()         { *m = AOResponse{} }
func (m *AOResponse) String() string { return proto.CompactTextString(m) }
func (*AOResponse) ProtoMessage()    {}
func (*AOResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{7}
}
func (m *AOResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AOResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AOResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AOResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AOResponse.Merge(m, src)
}
func (m *AOResponse) XXX_Size() int {
	return m.Size()
}
func (m *AOResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AOResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AOResponse proto.InternalMessageInfo

func (m *AOResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// GET Limit USER SKUs
type GLUSRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Skus                 []string `protobuf:"bytes,2,rep,name=skus,proto3" json:"skus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GLUSRequest) Reset()         { *m = GLUSRequest{} }
func (m *GLUSRequest) String() string { return proto.CompactTextString(m) }
func (*GLUSRequest) ProtoMessage()    {}
func (*GLUSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{8}
}
func (m *GLUSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLUSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLUSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLUSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLUSRequest.Merge(m, src)
}
func (m *GLUSRequest) XXX_Size() int {
	return m.Size()
}
func (m *GLUSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GLUSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GLUSRequest proto.InternalMessageInfo

func (m *GLUSRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GLUSRequest) GetSkus() []string {
	if m != nil {
		return m.Skus
	}
	return nil
}

type GLUSResponse struct {
	UserId               string                         `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Sku                  map[string]*GLUSResponse_Limit `protobuf:"bytes,2,rep,name=sku,proto3" json:"sku,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GLUSResponse) Reset()         { *m = GLUSResponse{} }
func (m *GLUSResponse) String() string { return proto.CompactTextString(m) }
func (*GLUSResponse) ProtoMessage()    {}
func (*GLUSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{9}
}
func (m *GLUSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLUSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLUSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLUSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLUSResponse.Merge(m, src)
}
func (m *GLUSResponse) XXX_Size() int {
	return m.Size()
}
func (m *GLUSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GLUSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GLUSResponse proto.InternalMessageInfo

func (m *GLUSResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GLUSResponse) GetSku() map[string]*GLUSResponse_Limit {
	if m != nil {
		return m.Sku
	}
	return nil
}

type GLUSResponse_Limit struct {
	Limit                map[string]int32 `protobuf:"bytes,1,rep,name=limit,proto3" json:"limit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GLUSResponse_Limit) Reset()         { *m = GLUSResponse_Limit{} }
func (m *GLUSResponse_Limit) String() string { return proto.CompactTextString(m) }
func (*GLUSResponse_Limit) ProtoMessage()    {}
func (*GLUSResponse_Limit) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{9, 0}
}
func (m *GLUSResponse_Limit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLUSResponse_Limit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLUSResponse_Limit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLUSResponse_Limit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLUSResponse_Limit.Merge(m, src)
}
func (m *GLUSResponse_Limit) XXX_Size() int {
	return m.Size()
}
func (m *GLUSResponse_Limit) XXX_DiscardUnknown() {
	xxx_messageInfo_GLUSResponse_Limit.DiscardUnknown(m)
}

var xxx_messageInfo_GLUSResponse_Limit proto.InternalMessageInfo

func (m *GLUSResponse_Limit) GetLimit() map[string]int32 {
	if m != nil {
		return m.Limit
	}
	return nil
}

// GET Limit USERS actions
type GLUARequest struct {
	Users                []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Actions              []string `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GLUARequest) Reset()         { *m = GLUARequest{} }
func (m *GLUARequest) String() string { return proto.CompactTextString(m) }
func (*GLUARequest) ProtoMessage()    {}
func (*GLUARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{10}
}
func (m *GLUARequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLUARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLUARequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLUARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLUARequest.Merge(m, src)
}
func (m *GLUARequest) XXX_Size() int {
	return m.Size()
}
func (m *GLUARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GLUARequest.DiscardUnknown(m)
}

var xxx_messageInfo_GLUARequest proto.InternalMessageInfo

func (m *GLUARequest) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GLUARequest) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

type GLUAResponse struct {
	Users                map[string]*GLUAResponse_SKUs `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GLUAResponse) Reset()         { *m = GLUAResponse{} }
func (m *GLUAResponse) String() string { return proto.CompactTextString(m) }
func (*GLUAResponse) ProtoMessage()    {}
func (*GLUAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{11}
}
func (m *GLUAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLUAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLUAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLUAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLUAResponse.Merge(m, src)
}
func (m *GLUAResponse) XXX_Size() int {
	return m.Size()
}
func (m *GLUAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GLUAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GLUAResponse proto.InternalMessageInfo

func (m *GLUAResponse) GetUsers() map[string]*GLUAResponse_SKUs {
	if m != nil {
		return m.Users
	}
	return nil
}

type GLUAResponse_Limit struct {
	Limit                map[string]int32 `protobuf:"bytes,1,rep,name=limit,proto3" json:"limit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GLUAResponse_Limit) Reset()         { *m = GLUAResponse_Limit{} }
func (m *GLUAResponse_Limit) String() string { return proto.CompactTextString(m) }
func (*GLUAResponse_Limit) ProtoMessage()    {}
func (*GLUAResponse_Limit) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{11, 0}
}
func (m *GLUAResponse_Limit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLUAResponse_Limit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLUAResponse_Limit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLUAResponse_Limit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLUAResponse_Limit.Merge(m, src)
}
func (m *GLUAResponse_Limit) XXX_Size() int {
	return m.Size()
}
func (m *GLUAResponse_Limit) XXX_DiscardUnknown() {
	xxx_messageInfo_GLUAResponse_Limit.DiscardUnknown(m)
}

var xxx_messageInfo_GLUAResponse_Limit proto.InternalMessageInfo

func (m *GLUAResponse_Limit) GetLimit() map[string]int32 {
	if m != nil {
		return m.Limit
	}
	return nil
}

type GLUAResponse_SKUs struct {
	Skus                 map[string]*GLUAResponse_Limit `protobuf:"bytes,1,rep,name=skus,proto3" json:"skus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GLUAResponse_SKUs) Reset()         { *m = GLUAResponse_SKUs{} }
func (m *GLUAResponse_SKUs) String() string { return proto.CompactTextString(m) }
func (*GLUAResponse_SKUs) ProtoMessage()    {}
func (*GLUAResponse_SKUs) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{11, 1}
}
func (m *GLUAResponse_SKUs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GLUAResponse_SKUs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GLUAResponse_SKUs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GLUAResponse_SKUs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GLUAResponse_SKUs.Merge(m, src)
}
func (m *GLUAResponse_SKUs) XXX_Size() int {
	return m.Size()
}
func (m *GLUAResponse_SKUs) XXX_DiscardUnknown() {
	xxx_messageInfo_GLUAResponse_SKUs.DiscardUnknown(m)
}

var xxx_messageInfo_GLUAResponse_SKUs proto.InternalMessageInfo

func (m *GLUAResponse_SKUs) GetSkus() map[string]*GLUAResponse_Limit {
	if m != nil {
		return m.Skus
	}
	return nil
}

// RETURN (возврат) order USER
type RORequest struct {
	UserId               int32            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderId              int32            `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ReturnTs             int64            `protobuf:"varint,3,opt,name=return_ts,json=returnTs,proto3" json:"return_ts,omitempty"`
	Content              []*RORequest_SKU `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RORequest) Reset()         { *m = RORequest{} }
func (m *RORequest) String() string { return proto.CompactTextString(m) }
func (*RORequest) ProtoMessage()    {}
func (*RORequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{12}
}
func (m *RORequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RORequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RORequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RORequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RORequest.Merge(m, src)
}
func (m *RORequest) XXX_Size() int {
	return m.Size()
}
func (m *RORequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RORequest.DiscardUnknown(m)
}

var xxx_messageInfo_RORequest proto.InternalMessageInfo

func (m *RORequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RORequest) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *RORequest) GetReturnTs() int64 {
	if m != nil {
		return m.ReturnTs
	}
	return 0
}

func (m *RORequest) GetContent() []*RORequest_SKU {
	if m != nil {
		return m.Content
	}
	return nil
}

type RORequest_SKU struct {
	Sku                  string   `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Qty                  int32    `protobuf:"varint,2,opt,name=qty,proto3" json:"qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RORequest_SKU) Reset()         { *m = RORequest_SKU{} }
func (m *RORequest_SKU) String() string { return proto.CompactTextString(m) }
func (*RORequest_SKU) ProtoMessage()    {}
func (*RORequest_SKU) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{12, 0}
}
func (m *RORequest_SKU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RORequest_SKU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RORequest_SKU.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RORequest_SKU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RORequest_SKU.Merge(m, src)
}
func (m *RORequest_SKU) XXX_Size() int {
	return m.Size()
}
func (m *RORequest_SKU) XXX_DiscardUnknown() {
	xxx_messageInfo_RORequest_SKU.DiscardUnknown(m)
}

var xxx_messageInfo_RORequest_SKU proto.InternalMessageInfo

func (m *RORequest_SKU) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *RORequest_SKU) GetQty() int32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

type ROResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ROResponse) Reset()         { *m = ROResponse{} }
func (m *ROResponse) String() string { return proto.CompactTextString(m) }
func (*ROResponse) ProtoMessage()    {}
func (*ROResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{13}
}
func (m *ROResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ROResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ROResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ROResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ROResponse.Merge(m, src)
}
func (m *ROResponse) XXX_Size() int {
	return m.Size()
}
func (m *ROResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ROResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ROResponse proto.InternalMessageInfo

func (m *ROResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// DEL Limit USER
type DLURequest struct {
	Users                []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Actions              []string `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DLURequest) Reset()         { *m = DLURequest{} }
func (m *DLURequest) String() string { return proto.CompactTextString(m) }
func (*DLURequest) ProtoMessage()    {}
func (*DLURequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{14}
}
func (m *DLURequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLURequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLURequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLURequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLURequest.Merge(m, src)
}
func (m *DLURequest) XXX_Size() int {
	return m.Size()
}
func (m *DLURequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DLURequest.DiscardUnknown(m)
}

var xxx_messageInfo_DLURequest proto.InternalMessageInfo

func (m *DLURequest) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *DLURequest) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

type DLUResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DLUResponse) Reset()         { *m = DLUResponse{} }
func (m *DLUResponse) String() string { return proto.CompactTextString(m) }
func (*DLUResponse) ProtoMessage()    {}
func (*DLUResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d0f3b96ccac44e7, []int{15}
}
func (m *DLUResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLUResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLUResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLUResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLUResponse.Merge(m, src)
}
func (m *DLUResponse) XXX_Size() int {
	return m.Size()
}
func (m *DLUResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DLUResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DLUResponse proto.InternalMessageInfo

func (m *DLUResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*CLRequest)(nil), "skulimiter.CLRequest")
	proto.RegisterMapType((map[string]*CLRequest_Actions)(nil), "skulimiter.CLRequest.SkusEntry")
	proto.RegisterType((*CLRequest_Action)(nil), "skulimiter.CLRequest.Action")
	proto.RegisterType((*CLRequest_Actions)(nil), "skulimiter.CLRequest.Actions")
	proto.RegisterMapType((map[string]*CLRequest_Action)(nil), "skulimiter.CLRequest.Actions.ActionsEntry")
	proto.RegisterType((*CLResponse)(nil), "skulimiter.CLResponse")
	proto.RegisterType((*GLRequest)(nil), "skulimiter.GLRequest")
	proto.RegisterType((*GLResponse)(nil), "skulimiter.GLResponse")
	proto.RegisterMapType((map[string]*GLResponse_Actions)(nil), "skulimiter.GLResponse.SkusEntry")
	proto.RegisterType((*GLResponse_Action)(nil), "skulimiter.GLResponse.Action")
	proto.RegisterType((*GLResponse_Actions)(nil), "skulimiter.GLResponse.Actions")
	proto.RegisterMapType((map[string]*GLResponse_Action)(nil), "skulimiter.GLResponse.Actions.ActionsEntry")
	proto.RegisterType((*DLRequest)(nil), "skulimiter.DLRequest")
	proto.RegisterType((*DLResponse)(nil), "skulimiter.DLResponse")
	proto.RegisterType((*AORequest)(nil), "skulimiter.AORequest")
	proto.RegisterType((*AORequest_SKU)(nil), "skulimiter.AORequest.SKU")
	proto.RegisterType((*AOResponse)(nil), "skulimiter.AOResponse")
	proto.RegisterType((*GLUSRequest)(nil), "skulimiter.GLUSRequest")
	proto.RegisterType((*GLUSResponse)(nil), "skulimiter.GLUSResponse")
	proto.RegisterMapType((map[string]*GLUSResponse_Limit)(nil), "skulimiter.GLUSResponse.SkuEntry")
	proto.RegisterType((*GLUSResponse_Limit)(nil), "skulimiter.GLUSResponse.Limit")
	proto.RegisterMapType((map[string]int32)(nil), "skulimiter.GLUSResponse.Limit.LimitEntry")
	proto.RegisterType((*GLUARequest)(nil), "skulimiter.GLUARequest")
	proto.RegisterType((*GLUAResponse)(nil), "skulimiter.GLUAResponse")
	proto.RegisterMapType((map[string]*GLUAResponse_SKUs)(nil), "skulimiter.GLUAResponse.UsersEntry")
	proto.RegisterType((*GLUAResponse_Limit)(nil), "skulimiter.GLUAResponse.Limit")
	proto.RegisterMapType((map[string]int32)(nil), "skulimiter.GLUAResponse.Limit.LimitEntry")
	proto.RegisterType((*GLUAResponse_SKUs)(nil), "skulimiter.GLUAResponse.SKUs")
	proto.RegisterMapType((map[string]*GLUAResponse_Limit)(nil), "skulimiter.GLUAResponse.SKUs.SkusEntry")
	proto.RegisterType((*RORequest)(nil), "skulimiter.RORequest")
	proto.RegisterType((*RORequest_SKU)(nil), "skulimiter.RORequest.SKU")
	proto.RegisterType((*ROResponse)(nil), "skulimiter.ROResponse")
	proto.RegisterType((*DLURequest)(nil), "skulimiter.DLURequest")
	proto.RegisterType((*DLUResponse)(nil), "skulimiter.DLUResponse")
}

func init() { proto.RegisterFile("sku-limiter.proto", fileDescriptor_4d0f3b96ccac44e7) }

var fileDescriptor_4d0f3b96ccac44e7 = []byte{
	// 1027 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x67, 0xd7, 0x71, 0x9c, 0x7d, 0x0e, 0x6d, 0x32, 0x75, 0x93, 0xcd, 0x92, 0xba, 0x61, 0x5a,
	0x44, 0x1a, 0x14, 0x1b, 0xc5, 0x3d, 0x34, 0x01, 0x84, 0x4c, 0x5d, 0x59, 0x55, 0x22, 0x8a, 0xd6,
	0xb8, 0xa5, 0x42, 0xa8, 0x5a, 0xb2, 0x43, 0x64, 0xad, 0xbb, 0x9b, 0xee, 0xcc, 0x22, 0xe5, 0xda,
	0xaf, 0xc0, 0x05, 0x24, 0xbe, 0x00, 0xe2, 0x13, 0x20, 0x71, 0x46, 0x1c, 0x91, 0xf8, 0x02, 0x28,
	0x70, 0xe2, 0x03, 0x70, 0xe2, 0x80, 0x66, 0x66, 0x67, 0xff, 0xd8, 0xeb, 0x35, 0x69, 0xd5, 0x4b,
	0xb2, 0xf3, 0xe6, 0xcd, 0xef, 0xbd, 0xf9, 0xfd, 0xde, 0x7b, 0xbb, 0x86, 0x55, 0xea, 0x45, 0xbb,
	0xe3, 0xd1, 0xd3, 0x11, 0x23, 0x61, 0xeb, 0x34, 0x0c, 0x58, 0x80, 0x80, 0x7a, 0x51, 0x6c, 0xb1,
	0x36, 0x4f, 0x82, 0xe0, 0x64, 0x4c, 0xda, 0xce, 0xe9, 0xa8, 0xed, 0xf8, 0x7e, 0xc0, 0x1c, 0x36,
	0x0a, 0x7c, 0x2a, 0x3d, 0xf1, 0x3f, 0x3a, 0x18, 0x77, 0x8f, 0x6c, 0xf2, 0x2c, 0x22, 0x94, 0xa1,
	0x0e, 0x2c, 0x50, 0x2f, 0xa2, 0xa6, 0xb6, 0x55, 0xd9, 0xae, 0xef, 0x5d, 0x6f, 0xa5, 0x30, 0xad,
	0xc4, 0xa9, 0x35, 0xf0, 0x22, 0x7a, 0xcf, 0x67, 0xe1, 0x99, 0x2d, 0x9c, 0xad, 0x77, 0x61, 0xb1,
	0x7b, 0xcc, 0x31, 0x51, 0x03, 0xaa, 0xc2, 0xdd, 0xd4, 0xb6, 0xb4, 0xed, 0xaa, 0x2d, 0x17, 0x68,
	0x05, 0x2a, 0x94, 0x1c, 0x9b, 0xfa, 0x96, 0xb6, 0x5d, 0xb1, 0xf9, 0xa3, 0xf5, 0x83, 0x06, 0x35,
	0x79, 0x84, 0xa2, 0x1e, 0xd4, 0x1c, 0xf9, 0x18, 0x47, 0xdd, 0x29, 0x8e, 0x1a, 0xfb, 0xab, 0xff,
	0x32, 0x01, 0x75, 0xd4, 0xfa, 0x0c, 0x96, 0xb3, 0x1b, 0x3c, 0xa6, 0x47, 0xce, 0x44, 0x1e, 0x86,
	0xcd, 0x1f, 0xd1, 0x1e, 0x54, 0xbf, 0x76, 0xc6, 0x11, 0x11, 0x79, 0xd4, 0xf7, 0x36, 0xcb, 0xa2,
	0xd8, 0xd2, 0xf5, 0x40, 0xbf, 0xa3, 0x59, 0x0f, 0xc1, 0x48, 0x2e, 0x5c, 0x00, 0xdb, 0xc9, 0xc3,
	0x5e, 0x2b, 0x4d, 0x3e, 0x83, 0x8b, 0x6f, 0x02, 0xf0, 0x7d, 0x7a, 0x1a, 0xf8, 0x94, 0xa0, 0x35,
	0x58, 0xa4, 0xcc, 0x61, 0x82, 0x7a, 0x8e, 0x1d, 0xaf, 0xf0, 0x3e, 0x18, 0xfd, 0x44, 0x1d, 0x94,
	0x51, 0xc7, 0x90, 0xe4, 0x23, 0x33, 0xa5, 0x4f, 0x17, 0x66, 0xb5, 0xc4, 0xdf, 0x55, 0x00, 0xfa,
	0x69, 0x84, 0xdb, 0x39, 0x69, 0xb7, 0xb2, 0x79, 0xa6, 0x5e, 0x53, 0xda, 0x7e, 0x7c, 0x51, 0x6d,
	0xd1, 0x26, 0x18, 0xae, 0xc3, 0x08, 0x65, 0x4e, 0xc8, 0xcc, 0x8a, 0xb0, 0xa7, 0x06, 0xeb, 0xc7,
	0x8c, 0xf2, 0xf7, 0x26, 0x95, 0x7f, 0x67, 0x46, 0x52, 0xe5, 0xd2, 0x3f, 0x9e, 0x2b, 0x7d, 0x99,
	0x46, 0x53, 0x61, 0xb2, 0xda, 0x3f, 0x2a, 0xd7, 0xfe, 0x76, 0x1e, 0xb7, 0x59, 0x9e, 0x7e, 0x56,
	0xfc, 0x7d, 0x30, 0x7a, 0x2f, 0x28, 0xeb, 0x4d, 0x80, 0xde, 0xfc, 0xba, 0xf9, 0x5b, 0x03, 0xa3,
	0xfb, 0x40, 0x45, 0x58, 0x87, 0x5a, 0x44, 0x49, 0xf8, 0x64, 0xe4, 0xc6, 0xea, 0x2d, 0xf2, 0xe5,
	0x7d, 0x17, 0x6d, 0xc0, 0x52, 0x10, 0xba, 0x72, 0x47, 0x17, 0x3b, 0x35, 0xb1, 0xce, 0x6e, 0x31,
	0x1a, 0xcb, 0x28, 0xb7, 0x3e, 0xa5, 0xa8, 0x03, 0xb5, 0xe3, 0xc0, 0x67, 0xc4, 0x67, 0xe6, 0x82,
	0x10, 0x6e, 0x23, 0x7b, 0xf3, 0x24, 0x6c, 0x6b, 0x70, 0x38, 0xb4, 0x95, 0xa7, 0xf5, 0x18, 0x2a,
	0x83, 0xc3, 0xa1, 0x28, 0x18, 0x2f, 0x52, 0x2c, 0x52, 0x2f, 0x42, 0x2d, 0xb8, 0xf2, 0xd4, 0x09,
	0x3d, 0xc2, 0x46, 0xfe, 0xc9, 0x13, 0x79, 0x4b, 0x95, 0x8e, 0x61, 0xaf, 0x26, 0x5b, 0x92, 0xc5,
	0xfb, 0x2e, 0x47, 0x78, 0xc6, 0xce, 0x44, 0x4e, 0x55, 0x9b, 0x3f, 0x72, 0x4a, 0x78, 0xd0, 0x39,
	0x94, 0x1c, 0x40, 0xbd, 0x7f, 0x34, 0x1c, 0xcc, 0xe0, 0xc4, 0x48, 0x38, 0x51, 0x72, 0xe8, 0xa9,
	0x1c, 0xf8, 0x27, 0x1d, 0x96, 0xe5, 0xe1, 0x38, 0xc8, 0xcc, 0xd3, 0x1d, 0x79, 0x3f, 0x5d, 0xf0,
	0xf2, 0x66, 0xbe, 0x22, 0xd2, 0xf3, 0xbc, 0xcf, 0x64, 0x19, 0x73, 0x6f, 0xeb, 0xb9, 0x06, 0xd5,
	0x23, 0xd1, 0x4f, 0x1f, 0xa6, 0x5d, 0xc6, 0x01, 0x6e, 0xcd, 0x04, 0x10, 0xee, 0xf2, 0xaf, 0x04,
	0x92, 0xe7, 0xac, 0x3b, 0x00, 0xa9, 0xb1, 0xa0, 0x66, 0x1b, 0xd9, 0x9a, 0xad, 0xe6, 0x07, 0xdd,
	0x92, 0xca, 0xea, 0xc2, 0xb5, 0x3e, 0x99, 0x58, 0xb6, 0xd6, 0x3f, 0x10, 0xbc, 0x77, 0x15, 0xef,
	0x0d, 0xa8, 0x72, 0xaa, 0x54, 0xb9, 0xcb, 0x45, 0x49, 0xbd, 0xff, 0x52, 0x11, 0xd4, 0x77, 0x13,
	0xea, 0xf7, 0x15, 0x80, 0xe4, 0xf8, 0xc6, 0x44, 0x26, 0x89, 0x63, 0x6b, 0xc8, 0xbd, 0x62, 0x72,
	0xc4, 0x89, 0xff, 0xcf, 0x73, 0xf7, 0x15, 0xf2, 0xfc, 0xbd, 0x06, 0x0b, 0x83, 0xc3, 0x21, 0x45,
	0xef, 0xe5, 0x26, 0xf2, 0xdb, 0x33, 0x53, 0xe0, 0xce, 0x53, 0x83, 0xf9, 0xa5, 0x46, 0xd3, 0xe4,
	0xfd, 0xf2, 0x33, 0x0f, 0x52, 0xe2, 0x2e, 0x3c, 0x4c, 0x27, 0xd2, 0xce, 0xd6, 0xc1, 0xcf, 0x1a,
	0x18, 0xf6, 0x4b, 0x8d, 0xa4, 0x37, 0xc0, 0x08, 0x09, 0x8b, 0x42, 0x3f, 0x9d, 0x49, 0x4b, 0xd2,
	0x30, 0x77, 0x28, 0xd9, 0xc5, 0x43, 0xe9, 0xd6, 0xac, 0xa1, 0x14, 0x0f, 0x19, 0x3d, 0x37, 0x64,
	0xec, 0xf9, 0x43, 0xe6, 0x7d, 0x3e, 0x9d, 0x87, 0x2f, 0x5a, 0xeb, 0x6f, 0x41, 0x5d, 0x9c, 0x2e,
	0x0f, 0xb2, 0xf7, 0x6f, 0x15, 0x60, 0x70, 0x38, 0x3c, 0x92, 0x77, 0x43, 0x5f, 0xc0, 0xa5, 0xbb,
	0x21, 0x71, 0x18, 0x11, 0x06, 0x7e, 0x9f, 0xab, 0x85, 0x5f, 0x21, 0xd6, 0xda, 0xa4, 0x59, 0xc6,
	0xc1, 0x9b, 0xcf, 0x7f, 0xff, 0xeb, 0x1b, 0x7d, 0x0d, 0xaf, 0xb6, 0x8f, 0x05, 0x8e, 0xfc, 0x98,
	0xdc, 0xa5, 0x5e, 0x74, 0xa0, 0xed, 0xa0, 0x47, 0x50, 0xef, 0x13, 0x56, 0x8c, 0xdd, 0x2f, 0xc6,
	0x4e, 0x5f, 0x7e, 0x78, 0x43, 0x60, 0x5f, 0xc1, 0x97, 0xda, 0x27, 0x84, 0x4d, 0x01, 0xf7, 0xc8,
	0xb8, 0x18, 0xb8, 0x57, 0x0c, 0xdc, 0x2b, 0x02, 0x76, 0xc9, 0x38, 0x0f, 0xfc, 0x09, 0x2c, 0x75,
	0x5d, 0xf7, 0x01, 0xaf, 0x9a, 0x3c, 0x6a, 0xf2, 0x6a, 0xca, 0xa3, 0xa6, 0x2f, 0x0f, 0x7c, 0x55,
	0xa0, 0x5e, 0xc6, 0xd0, 0x76, 0x5c, 0x77, 0x57, 0x14, 0x1e, 0x47, 0xfc, 0x0a, 0x56, 0x14, 0x07,
	0xbc, 0x39, 0x44, 0xfb, 0xae, 0x4f, 0x8f, 0x40, 0x89, 0x6d, 0xce, 0x9a, 0x8d, 0xf8, 0xba, 0x40,
	0xdf, 0xc0, 0x8d, 0x0c, 0x19, 0xbc, 0x26, 0x78, 0xe2, 0x94, 0xc7, 0xf1, 0xa1, 0x91, 0x8d, 0x43,
	0xd5, 0xa7, 0xd2, 0xfa, 0x74, 0x97, 0x15, 0xc7, 0x4a, 0xda, 0x0f, 0xdf, 0x10, 0xb1, 0xae, 0x61,
	0x73, 0x22, 0x16, 0xdd, 0x8d, 0xab, 0x8d, 0xc7, 0x7b, 0x08, 0x75, 0x5b, 0x34, 0x50, 0x01, 0x59,
	0x76, 0x31, 0x59, 0x69, 0x13, 0x60, 0x53, 0x84, 0x40, 0xf8, 0xf5, 0xb6, 0xec, 0xc2, 0x94, 0xaf,
	0xcf, 0x61, 0x59, 0x49, 0xcb, 0xef, 0x81, 0x26, 0x44, 0x54, 0x0d, 0x62, 0xad, 0x4f, 0xd9, 0x63,
	0x68, 0x4b, 0x40, 0x37, 0xf0, 0xe5, 0x8c, 0xba, 0x3c, 0xfb, 0x03, 0x6d, 0xe7, 0xa3, 0x95, 0x5f,
	0xcf, 0x9b, 0xda, 0x6f, 0xe7, 0x4d, 0xed, 0x8f, 0xf3, 0xa6, 0xf6, 0xed, 0x9f, 0xcd, 0xd7, 0xbe,
	0x5c, 0x14, 0xbf, 0x65, 0x3a, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x09, 0xc4, 0x13, 0xe8, 0x0a,
	0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SKULimiterClient is the client API for SKULimiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SKULimiterClient interface {
	CreateLimitSKU(ctx context.Context, in *CLRequest, opts ...grpc.CallOption) (*CLResponse, error)
	GetLimitSKU(ctx context.Context, in *GLRequest, opts ...grpc.CallOption) (*GLResponse, error)
	DelLimitSKU(ctx context.Context, in *DLRequest, opts ...grpc.CallOption) (*DLResponse, error)
	AddOrder(ctx context.Context, in *AORequest, opts ...grpc.CallOption) (*AOResponse, error)
	GetLimitUserSKUs(ctx context.Context, in *GLUSRequest, opts ...grpc.CallOption) (*GLUSResponse, error)
	GetLimitUsersActions(ctx context.Context, in *GLUARequest, opts ...grpc.CallOption) (*GLUAResponse, error)
	ReturnOrder(ctx context.Context, in *RORequest, opts ...grpc.CallOption) (*ROResponse, error)
	DelLimitUser(ctx context.Context, in *DLURequest, opts ...grpc.CallOption) (*DLUResponse, error)
}

type sKULimiterClient struct {
	cc *grpc.ClientConn
}

func NewSKULimiterClient(cc *grpc.ClientConn) SKULimiterClient {
	return &sKULimiterClient{cc}
}

func (c *sKULimiterClient) CreateLimitSKU(ctx context.Context, in *CLRequest, opts ...grpc.CallOption) (*CLResponse, error) {
	out := new(CLResponse)
	err := c.cc.Invoke(ctx, "/skulimiter.SKULimiter/CreateLimitSKU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKULimiterClient) GetLimitSKU(ctx context.Context, in *GLRequest, opts ...grpc.CallOption) (*GLResponse, error) {
	out := new(GLResponse)
	err := c.cc.Invoke(ctx, "/skulimiter.SKULimiter/GetLimitSKU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKULimiterClient) DelLimitSKU(ctx context.Context, in *DLRequest, opts ...grpc.CallOption) (*DLResponse, error) {
	out := new(DLResponse)
	err := c.cc.Invoke(ctx, "/skulimiter.SKULimiter/DelLimitSKU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKULimiterClient) AddOrder(ctx context.Context, in *AORequest, opts ...grpc.CallOption) (*AOResponse, error) {
	out := new(AOResponse)
	err := c.cc.Invoke(ctx, "/skulimiter.SKULimiter/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKULimiterClient) GetLimitUserSKUs(ctx context.Context, in *GLUSRequest, opts ...grpc.CallOption) (*GLUSResponse, error) {
	out := new(GLUSResponse)
	err := c.cc.Invoke(ctx, "/skulimiter.SKULimiter/GetLimitUserSKUs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKULimiterClient) GetLimitUsersActions(ctx context.Context, in *GLUARequest, opts ...grpc.CallOption) (*GLUAResponse, error) {
	out := new(GLUAResponse)
	err := c.cc.Invoke(ctx, "/skulimiter.SKULimiter/GetLimitUsersActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKULimiterClient) ReturnOrder(ctx context.Context, in *RORequest, opts ...grpc.CallOption) (*ROResponse, error) {
	out := new(ROResponse)
	err := c.cc.Invoke(ctx, "/skulimiter.SKULimiter/ReturnOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sKULimiterClient) DelLimitUser(ctx context.Context, in *DLURequest, opts ...grpc.CallOption) (*DLUResponse, error) {
	out := new(DLUResponse)
	err := c.cc.Invoke(ctx, "/skulimiter.SKULimiter/DelLimitUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SKULimiterServer is the server API for SKULimiter service.
type SKULimiterServer interface {
	CreateLimitSKU(context.Context, *CLRequest) (*CLResponse, error)
	GetLimitSKU(context.Context, *GLRequest) (*GLResponse, error)
	DelLimitSKU(context.Context, *DLRequest) (*DLResponse, error)
	AddOrder(context.Context, *AORequest) (*AOResponse, error)
	GetLimitUserSKUs(context.Context, *GLUSRequest) (*GLUSResponse, error)
	GetLimitUsersActions(context.Context, *GLUARequest) (*GLUAResponse, error)
	ReturnOrder(context.Context, *RORequest) (*ROResponse, error)
	DelLimitUser(context.Context, *DLURequest) (*DLUResponse, error)
}

// UnimplementedSKULimiterServer can be embedded to have forward compatible implementations.
type UnimplementedSKULimiterServer struct {
}

func (*UnimplementedSKULimiterServer) CreateLimitSKU(ctx context.Context, req *CLRequest) (*CLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLimitSKU not implemented")
}
func (*UnimplementedSKULimiterServer) GetLimitSKU(ctx context.Context, req *GLRequest) (*GLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitSKU not implemented")
}
func (*UnimplementedSKULimiterServer) DelLimitSKU(ctx context.Context, req *DLRequest) (*DLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLimitSKU not implemented")
}
func (*UnimplementedSKULimiterServer) AddOrder(ctx context.Context, req *AORequest) (*AOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (*UnimplementedSKULimiterServer) GetLimitUserSKUs(ctx context.Context, req *GLUSRequest) (*GLUSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitUserSKUs not implemented")
}
func (*UnimplementedSKULimiterServer) GetLimitUsersActions(ctx context.Context, req *GLUARequest) (*GLUAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitUsersActions not implemented")
}
func (*UnimplementedSKULimiterServer) ReturnOrder(ctx context.Context, req *RORequest) (*ROResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrder not implemented")
}
func (*UnimplementedSKULimiterServer) DelLimitUser(ctx context.Context, req *DLURequest) (*DLUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLimitUser not implemented")
}

func RegisterSKULimiterServer(s *grpc.Server, srv SKULimiterServer) {
	s.RegisterService(&_SKULimiter_serviceDesc, srv)
}

func _SKULimiter_CreateLimitSKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKULimiterServer).CreateLimitSKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skulimiter.SKULimiter/CreateLimitSKU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKULimiterServer).CreateLimitSKU(ctx, req.(*CLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKULimiter_GetLimitSKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKULimiterServer).GetLimitSKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skulimiter.SKULimiter/GetLimitSKU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKULimiterServer).GetLimitSKU(ctx, req.(*GLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKULimiter_DelLimitSKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKULimiterServer).DelLimitSKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skulimiter.SKULimiter/DelLimitSKU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKULimiterServer).DelLimitSKU(ctx, req.(*DLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKULimiter_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKULimiterServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skulimiter.SKULimiter/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKULimiterServer).AddOrder(ctx, req.(*AORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKULimiter_GetLimitUserSKUs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GLUSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKULimiterServer).GetLimitUserSKUs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skulimiter.SKULimiter/GetLimitUserSKUs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKULimiterServer).GetLimitUserSKUs(ctx, req.(*GLUSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKULimiter_GetLimitUsersActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GLUARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKULimiterServer).GetLimitUsersActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skulimiter.SKULimiter/GetLimitUsersActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKULimiterServer).GetLimitUsersActions(ctx, req.(*GLUARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKULimiter_ReturnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKULimiterServer).ReturnOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skulimiter.SKULimiter/ReturnOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKULimiterServer).ReturnOrder(ctx, req.(*RORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SKULimiter_DelLimitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DLURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SKULimiterServer).DelLimitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skulimiter.SKULimiter/DelLimitUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SKULimiterServer).DelLimitUser(ctx, req.(*DLURequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SKULimiter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skulimiter.SKULimiter",
	HandlerType: (*SKULimiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLimitSKU",
			Handler:    _SKULimiter_CreateLimitSKU_Handler,
		},
		{
			MethodName: "GetLimitSKU",
			Handler:    _SKULimiter_GetLimitSKU_Handler,
		},
		{
			MethodName: "DelLimitSKU",
			Handler:    _SKULimiter_DelLimitSKU_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _SKULimiter_AddOrder_Handler,
		},
		{
			MethodName: "GetLimitUserSKUs",
			Handler:    _SKULimiter_GetLimitUserSKUs_Handler,
		},
		{
			MethodName: "GetLimitUsersActions",
			Handler:    _SKULimiter_GetLimitUsersActions_Handler,
		},
		{
			MethodName: "ReturnOrder",
			Handler:    _SKULimiter_ReturnOrder_Handler,
		},
		{
			MethodName: "DelLimitUser",
			Handler:    _SKULimiter_DelLimitUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sku-limiter.proto",
}

func (m *CLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Skus) > 0 {
		for k := range m.Skus {
			v := m.Skus[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CLRequest_Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLRequest_Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CLRequest_Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sec != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.Sec))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CLRequest_Actions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLRequest_Actions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CLRequest_Actions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Actions) > 0 {
		for k := range m.Actions {
			v := m.Actions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actions[iNdEx])
			copy(dAtA[i:], m.Actions[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Actions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Skus) > 0 {
		for iNdEx := len(m.Skus) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Skus[iNdEx])
			copy(dAtA[i:], m.Skus[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Skus[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Skus) > 0 {
		for k := range m.Skus {
			v := m.Skus[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GLResponse_Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLResponse_Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLResponse_Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Datestart != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.Datestart))
		i--
		dAtA[i] = 0x18
	}
	if m.Sec != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.Sec))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GLResponse_Actions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLResponse_Actions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLResponse_Actions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Actions) > 0 {
		for k := range m.Actions {
			v := m.Actions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actions[iNdEx])
			copy(dAtA[i:], m.Actions[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Actions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Skus) > 0 {
		for iNdEx := len(m.Skus) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Skus[iNdEx])
			copy(dAtA[i:], m.Skus[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Skus[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AORequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AORequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AORequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		for iNdEx := len(m.Content) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Content[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OrderTs != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.OrderTs))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderId != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AORequest_SKU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AORequest_SKU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AORequest_SKU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Qty != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.Qty))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MarketingActionId) > 0 {
		i -= len(m.MarketingActionId)
		copy(dAtA[i:], m.MarketingActionId)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.MarketingActionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sku) > 0 {
		i -= len(m.Sku)
		copy(dAtA[i:], m.Sku)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Sku)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AOResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AOResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AOResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GLUSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLUSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLUSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Skus) > 0 {
		for iNdEx := len(m.Skus) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Skus[iNdEx])
			copy(dAtA[i:], m.Skus[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Skus[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GLUSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLUSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLUSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sku) > 0 {
		for k := range m.Sku {
			v := m.Sku[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GLUSResponse_Limit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLUSResponse_Limit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLUSResponse_Limit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		for k := range m.Limit {
			v := m.Limit[k]
			baseI := i
			i = encodeVarintSkuLimiter(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GLUARequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLUARequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLUARequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actions[iNdEx])
			copy(dAtA[i:], m.Actions[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Actions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Users[iNdEx])
			copy(dAtA[i:], m.Users[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Users[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GLUAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLUAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLUAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Users) > 0 {
		for k := range m.Users {
			v := m.Users[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GLUAResponse_Limit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLUAResponse_Limit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLUAResponse_Limit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		for k := range m.Limit {
			v := m.Limit[k]
			baseI := i
			i = encodeVarintSkuLimiter(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GLUAResponse_SKUs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GLUAResponse_SKUs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GLUAResponse_SKUs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Skus) > 0 {
		for k := range m.Skus {
			v := m.Skus[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSkuLimiter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RORequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RORequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RORequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		for iNdEx := len(m.Content) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Content[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSkuLimiter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ReturnTs != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.ReturnTs))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderId != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RORequest_SKU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RORequest_SKU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RORequest_SKU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Qty != 0 {
		i = encodeVarintSkuLimiter(dAtA, i, uint64(m.Qty))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sku) > 0 {
		i -= len(m.Sku)
		copy(dAtA[i:], m.Sku)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Sku)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ROResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ROResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ROResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DLURequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLURequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLURequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actions[iNdEx])
			copy(dAtA[i:], m.Actions[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Actions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Users[iNdEx])
			copy(dAtA[i:], m.Users[iNdEx])
			i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Users[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DLUResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLUResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLUResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSkuLimiter(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSkuLimiter(dAtA []byte, offset int, v uint64) int {
	offset -= sovSkuLimiter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Skus) > 0 {
		for k, v := range m.Skus {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSkuLimiter(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CLRequest_Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovSkuLimiter(uint64(m.Limit))
	}
	if m.Sec != 0 {
		n += 1 + sovSkuLimiter(uint64(m.Sec))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CLRequest_Actions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for k, v := range m.Actions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSkuLimiter(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Skus) > 0 {
		for _, s := range m.Skus {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Skus) > 0 {
		for k, v := range m.Skus {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSkuLimiter(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLResponse_Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovSkuLimiter(uint64(m.Limit))
	}
	if m.Sec != 0 {
		n += 1 + sovSkuLimiter(uint64(m.Sec))
	}
	if m.Datestart != 0 {
		n += 1 + sovSkuLimiter(uint64(m.Datestart))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLResponse_Actions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for k, v := range m.Actions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSkuLimiter(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Skus) > 0 {
		for _, s := range m.Skus {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AORequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovSkuLimiter(uint64(m.UserId))
	}
	if m.OrderId != 0 {
		n += 1 + sovSkuLimiter(uint64(m.OrderId))
	}
	if m.OrderTs != 0 {
		n += 1 + sovSkuLimiter(uint64(m.OrderTs))
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AORequest_SKU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sku)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	l = len(m.MarketingActionId)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if m.Qty != 0 {
		n += 1 + sovSkuLimiter(uint64(m.Qty))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AOResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLUSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if len(m.Skus) > 0 {
		for _, s := range m.Skus {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLUSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if len(m.Sku) > 0 {
		for k, v := range m.Sku {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSkuLimiter(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLUSResponse_Limit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limit) > 0 {
		for k, v := range m.Limit {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + 1 + sovSkuLimiter(uint64(v))
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLUARequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, s := range m.Users {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLUAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for k, v := range m.Users {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSkuLimiter(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLUAResponse_Limit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Limit) > 0 {
		for k, v := range m.Limit {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + 1 + sovSkuLimiter(uint64(v))
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GLUAResponse_SKUs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Skus) > 0 {
		for k, v := range m.Skus {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSkuLimiter(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSkuLimiter(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSkuLimiter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RORequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovSkuLimiter(uint64(m.UserId))
	}
	if m.OrderId != 0 {
		n += 1 + sovSkuLimiter(uint64(m.OrderId))
	}
	if m.ReturnTs != 0 {
		n += 1 + sovSkuLimiter(uint64(m.ReturnTs))
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RORequest_SKU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sku)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if m.Qty != 0 {
		n += 1 + sovSkuLimiter(uint64(m.Qty))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ROResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DLURequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, s := range m.Users {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			l = len(s)
			n += 1 + l + sovSkuLimiter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DLUResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSkuLimiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSkuLimiter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSkuLimiter(x uint64) (n int) {
	return sovSkuLimiter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skus == nil {
				m.Skus = make(map[string]*CLRequest_Actions)
			}
			var mapkey string
			var mapvalue *CLRequest_Actions
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CLRequest_Actions{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Skus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLRequest_Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sec", wireType)
			}
			m.Sec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sec |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLRequest_Actions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Actions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Actions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actions == nil {
				m.Actions = make(map[string]*CLRequest_Action)
			}
			var mapkey string
			var mapvalue *CLRequest_Action
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CLRequest_Action{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Actions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skus = append(m.Skus, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skus == nil {
				m.Skus = make(map[string]*GLResponse_Actions)
			}
			var mapkey string
			var mapvalue *GLResponse_Actions
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GLResponse_Actions{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Skus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLResponse_Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sec", wireType)
			}
			m.Sec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sec |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datestart", wireType)
			}
			m.Datestart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Datestart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLResponse_Actions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Actions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Actions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actions == nil {
				m.Actions = make(map[string]*GLResponse_Action)
			}
			var mapkey string
			var mapvalue *GLResponse_Action
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GLResponse_Action{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Actions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skus = append(m.Skus, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AORequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AORequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AORequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderTs", wireType)
			}
			m.OrderTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &AORequest_SKU{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AORequest_SKU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SKU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SKU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sku", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sku = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketingActionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketingActionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			m.Qty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qty |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AOResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AOResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AOResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLUSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GLUSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GLUSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skus = append(m.Skus, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLUSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GLUSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GLUSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sku", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sku == nil {
				m.Sku = make(map[string]*GLUSResponse_Limit)
			}
			var mapkey string
			var mapvalue *GLUSResponse_Limit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GLUSResponse_Limit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Sku[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLUSResponse_Limit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Limit[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLUARequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GLUARequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GLUARequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLUAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GLUAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GLUAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = make(map[string]*GLUAResponse_SKUs)
			}
			var mapkey string
			var mapvalue *GLUAResponse_SKUs
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GLUAResponse_SKUs{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Users[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLUAResponse_Limit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Limit[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GLUAResponse_SKUs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SKUs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SKUs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skus == nil {
				m.Skus = make(map[string]*GLUAResponse_Limit)
			}
			var mapkey string
			var mapvalue *GLUAResponse_Limit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkuLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkuLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GLUAResponse_Limit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkuLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkuLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Skus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RORequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RORequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RORequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTs", wireType)
			}
			m.ReturnTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &RORequest_SKU{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RORequest_SKU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SKU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SKU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sku", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sku = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			m.Qty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qty |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ROResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ROResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ROResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLURequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLURequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLURequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLUResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLUResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLUResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkuLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkuLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSkuLimiter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSkuLimiter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkuLimiter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSkuLimiter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSkuLimiter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSkuLimiter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSkuLimiter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSkuLimiter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSkuLimiter = fmt.Errorf("proto: unexpected end of group")
)
